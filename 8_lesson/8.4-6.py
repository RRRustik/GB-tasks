"""4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
А также класс «Оргтехника», который будет базовым для классов-наследников.
Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
В базовом классе определить параметры, общие для приведенных типов.
В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.
"""
"""5. Продолжить работу над прошлым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу 
в определенное подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники, 
а также других данных, можно использовать любую подходящую структуру, например словарь.
"""
"""
6. Продолжить работу над заданием. Реализуйте механизм валидации вводимых пользователем данных. 
Например, нельзя отправить принтеры в виде строки или меньше 0.
Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, 
изученных на уроках по ООП.
"""

class Storage:

    def __init__(self, goods, price, amount):
        self.goods = goods
        self.amount = amount
        self.price = price

    def __str__(self):
        return f'{self.goods} стоимость {self.price} кол-во {self.amount}'

    def moving(self):


class Printer(Storage):

    def __init__(self, company, amount, price):
        super().__init__(company, amount)
        self.price = price

class Scanner(Storage):

    def __init__(self, company, amount, size):
        super().__init__(company, amount)
        self.size = size

class Xerox(Storage):

    def __init__(self, company, amount, speed):
        super().__init__(company, amount)
        self.speed = speed



p = Printer('Принтер', 10000, 3)
s = Scanner('Сканнер', 20000, 5)
x = Xerox('Ксерокс', 1000, 1)

print(p.moving())
print(s.moving())
print(x.moving())


